// Pull the plugin from a Maven Repo
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.1'
        classpath 'com.eriwen:gradle-css-plugin:1.1.2'
    }
}

// print that build is starting
println "Build is starting..."

task wrapper(type: Wrapper) {
	gradleVersion = '1.2'
}

// print key directory variables to console
println "projectDir = ${projectDir}"
println "buildDir = ${buildDir}"

// Invoke the plugin
apply plugin: 'js'
apply plugin: 'css'

// Declare your sources
javascript.source {
    dev {
        js {
            srcDir 'js'
            include "*.js"
            exclude "*.min.js"
        }
    }
    prod {
        js {
            srcDir "${projectDir}"
            include "*.min.js"
        }
    }
}

// Specify a collection of files to be combined, then minified and finally GZip compressed.
task combinejs(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
    source = javascript.source.dev.js.files
    dest = file("${buildDir}/all.js")
}

task minifyjs(type: com.eriwen.gradle.js.tasks.MinifyJsTask, dependsOn: 'combinejs') {
    source = file("${buildDir}/all.js")
    dest = file("${buildDir}/all-min.js")
    closure {
        warningLevel = 'QUIET'
    }
}

task gzipjs(type: com.eriwen.gradle.js.tasks.GzipJsTask, dependsOn: 'minifyjs') {
    source = file("${buildDir}/all-min.js")
    dest = file("${buildDir}/all-min.js")
}

// JSHint support
task jshintjs(type: com.eriwen.gradle.js.tasks.JsHintTask) {
    source = "js"
    dest = file("${buildDir}/jshint.out")
}

// JSDoc 3 support
task jsdocjs(type: com.eriwen.gradle.js.tasks.JsDocTask) {
    source = javascript.source.dev.js.files
    destinationDir = "${buildDir}/jsdoc"
}

// props2Js support
task processProps(type: com.eriwen.gradle.js.tasks.Props2JsTask) {
    source = file("${projectDir}/src/test/resources/test.properties")
    dest = file("${buildDir}/props.jsonp")
    props {
        type = 'jsonp'
        functionName = 'fn'
    }
}

task jslint(type: Exec, description: 'Runs JS Hint via node.js') {
    workingDir = "/usr/local/lib/node_modules/jshint"
    commandLine = ["/usr/local/lib/node_modules/jshint/bin/hint","${projectDir}/js","--config","${projectDir}/js/.jshintrc","--jslint-reporter"]
    standardOutput = new BufferedOutputStream(new FileOutputStream(file("${buildDir}/jshint.xml")))
    ignoreExitValue = true
}

task jslintlocal(type: Exec, description: 'Runs JS Hint via node.js') {
    workingDir = "/usr/local/lib/node_modules/jshint"
    commandLine = ["/usr/local/lib/node_modules/jshint/bin/hint","${projectDir}/js","--config","${projectDir}/js/.jshintrc"]
    ignoreExitValue = false
}

// Declare your sources for the css
css.source {
    dev {
        css {
            srcDir 'styles'
            include "*.css"
            exclude "*.min.css"
        }
    }
}

// Specify a collection of files to be combined, then minified and finally GZip compressed.
combineCss {
    source = css.source.dev.css.files
    dest = "${buildDir}/all.css"
}

minifyCss {
    source = file("${buildDir}/all.css")
    dest = "${buildDir}/all-min.css"
    yuicompressor { // Optional
        lineBreakPos = -1
    }
}

gzipCss {
    source = file("${buildDir}/all-min.css")
    dest = file("${buildDir}/all-min-compressed.css")
}
    
csslint {
    source = css.source.dev.css.files
    dest = "${buildDir}/csslint.xml"
    options { // Optional
        format = 'lint-xml'
        warnings = ['box-model', 'empty-rules', 'duplicate-properties']
        errors = []
	}
}

// creates the WAR package to be deployed
task createPackage(type: Zip) {
    classifier = 'src'
    from "${buildDir}"
    include 'src/**/*'
}